version: 2.1
# remember that we separate the frontend and backend into separate jobs!
orbs:
  slack: circleci/slack@4.12.1

commands: #adding slack orb for slack integration
  notify_on_failure:
    steps:
      - slack/notify:
          event: fail
          channel: cicd
          template: basic_fail_1



jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout #to commit
      - run:
          name: Build Frontend
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_on_failure

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build Backend
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_on_failure

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout  #checkout should always come first, e.g. before restore_cache in this case
      - restore_cache:
          keys: [frontend-build]

      - run:
          name: Testing frontend
          command: |
            cd frontend
            npm install
            npm run test
      - notify_on_failure

  test-backend:
    docker:
      - image: circleci/node:13.8.0 
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]

      - run:
          name: Testing backend
          command: |
            cd backend
            npm install
            npm run test
      - notify_on_failure

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: #Note that the --audit-level parameter above specifies the minimum vulnerability level that will cause the command to fail. This option does not filter the report output, it simply changes the command's failure threshold.
          name: Scan frontend for vulnerabilites
          command: |
            cd frontend
            npm install oauth-sign@^0.9.0
            npm audit fix --force
            npm audit --audit-level=critical
      - notify_on_failure

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: #Note that the --audit-level parameter above specifies the minimum vulnerability level that will cause the command to fail. This option does not filter the report output, it simply changes the command's failure threshold.
          name: Scan backend for vulnerabilites
          command: |
            cd  backend
            npm install oauth-sign@^0.9.0
            npm audit fix --force
            npm audit --audit-level=critical
      - notify_on_failure

  notify_on_success: # success notification for slack integration
    docker:
      - image: cimg/base:stable
    steps:
      - slack/notify:
          event: pass
          channel: cicd
          template: success_tagged_deploy_1
workflows:
  UdapeopleCode:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - notify_on_success:
          requires:
            - test-frontend
            - test-backend
            - scan-frontend
            - scan-backend